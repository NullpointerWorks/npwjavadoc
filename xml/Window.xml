<?xml version="1.0" encoding="UTF-8" ?>
<source>
	<module>libnpw.core</module>
	<package>com.nullpointerworks.core</package>
	<commentary>
		A container for a {@code javax.swing.JFrame} which serves as the primary window handler. The Window does not extend any other subclass. To gain access to the underlying frame use; {@code window.getFrame();}
		<author>Michiel Drost - Nullpointer Works</author>
		<since>1.0.0</since>
	</commentary>
	<code>
		<type>class</type>
		<name>Window</name>
		<modifiers>class</modifiers>
		<constructor>
			<commentary>Create a window with the given internal dimensions. By default, this window will have no title, be set in windowed mode and appear on monitor ID 1.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>int</type>
				<name>width</name>
				<comment> - the width of the display</comment>
			</param>
			<param>
				<type>int</type>
				<name>height</name>
				<comment> - the height of the display</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<constructor>
			<commentary>Create a window with the given internal dimensions and title. By default, this window will be in windowed mode and appear on monitor ID 1.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>int</type>
				<name>width</name>
				<comment> - the width of the display</comment>
			</param>
			<param>
				<type>int</type>
				<name>height</name>
				<comment> - the height of the display</comment>
			</param>
			<param>
				<type>String</type>
				<name>title</name>
				<comment> - the window title</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<constructor>
			<commentary>Create a window with the given internal dimensions, title and windowing mode. By default, this window will appear on monitor ID 1.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>int</type>
				<name>width</name>
				<comment> - the width of the display</comment>
			</param>
			<param>
				<type>int</type>
				<name>height</name>
				<comment> - the height of the display</comment>
			</param>
			<param>
				<type>String</type>
				<name>title</name>
				<comment> - the window title</comment>
			</param>
			<param>
				<type>WindowMode</type>
				<name>mode</name>
				<comment> - the windowing mode</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<constructor>
			<commentary>Create a window with the given internal dimensions, title and target monitor. By default, this window will be set in windowed mode.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>int</type>
				<name>width</name>
				<comment> - the width of the display</comment>
			</param>
			<param>
				<type>int</type>
				<name>height</name>
				<comment> - the height of the display</comment>
			</param>
			<param>
				<type>String</type>
				<name>title</name>
				<comment> - the window title</comment>
			</param>
			<param>
				<type>Monitor</type>
				<name>monitor</name>
				<comment> - the target monitor</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<constructor>
			<commentary>Create a window with the dimensions of the target monitor. This constructor is meant for fullscreen type modes only. When a non-fullscreen type mode is used, the dimensions will default to 800 by 600 pixels.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>String</type>
				<name>title</name>
				<comment> - the window title</comment>
			</param>
			<param>
				<type>WindowMode</type>
				<name>mode</name>
				<comment> - the windowing mode</comment>
			</param>
			<param>
				<type>Monitor</type>
				<name>monitor</name>
				<comment> - the target monitor</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<constructor>
			<commentary>Create a window with the given internal dimensions, title, windowing mode and target monitor.</commentary>
			<name>Window</name>
			<modifiers>public</modifiers>
			<param>
				<type>int</type>
				<name>width</name>
				<comment> - the width of the display</comment>
			</param>
			<param>
				<type>int</type>
				<name>height</name>
				<comment> - the height of the display</comment>
			</param>
			<param>
				<type>String</type>
				<name>title</name>
				<comment> - the window title</comment>
			</param>
			<param>
				<type>WindowMode</type>
				<name>mode</name>
				<comment> - the windowing mode</comment>
			</param>
			<param>
				<type>Monitor</type>
				<name>monitor</name>
				<comment> - the target monitor</comment>
			</param>
			<since>1.0.0</since>
		</constructor>
		<method>
			<commentary>Swap the integer content of the given array to the display buffer. It's up to the user to make sure that the length of the array matches the area of the display. Each integer is assumed to follow ARGB order at a bit depth of 8 bits.</commentary>
			<name>swap</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>int[]</type>
				<name>pixels</name>
				<comment> - the array of integers that represent colors</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Delegate to display the internal {@code JFrame} object. Set true to make the window appear, false to hide it.</commentary>
			<name>setVisible</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>boolean</type>
				<name>show</name>
				<comment> - to show, or not to show</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Set the windowing mode for this window. what dimensions it might take</commentary>
			<name>setWindowMode</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>WindowMode</type>
				<name>mode</name>
				<comment> - determines if a window will be framed and</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>This method sets a {@code DrawCanvas} object as the primary recipient to render to. When creating a new window, this class creates a {@code PanelCanvas} instance as the primary rendering recipient. Use this method only if you want the window to utilize non-standard rendering code.</commentary>
			<name>setDrawCanvas</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>DrawCanvas</type>
				<name>canvas</name>
				<comment> - the drawing canvas to be used in this window.</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Provide an {@code IntBuffer} object that contains the ARGB image data to be set as the icon for the window. No icon will be set if the input image is null.</commentary>
			<name>setIcon</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>IntBuffer</type>
				<name>image</name>
				<comment> - the integer buffer to be used</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Provide an input stream linking to image data to be used as the icon for the window.</commentary>
			<name>setIcon</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>InputStream</type>
				<name>stream</name>
				<comment> - input stream linking to the image data</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Add a mouse input to the window to read user input. The {@code MouseInput} will be attached as a listener to the DrawCanvas. This input device will be moved to another canvas when swapping to another canvas.</commentary>
			<name>addInputDevice</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>MouseInput</type>
				<name>mouseinput</name>
				<comment> - the mouse input object</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Add a keyboard input to the window to read user input. The {@code KeyboardInput} will be added as a listener to the internal frame. This input device will be moved to another frame when creating a new window.</commentary>
			<name>addInputDevice</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>KeyboardInput</type>
				<name>keyboardinput</name>
				<comment> - the keyboard input object</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Add a {@code java.awt.event.WindowListener} to the internal frame. When creating a new window, all window listeners will be added to the new window. This method is intended to be used by the libnpw.game library which has a {@code LoopAdapter} that track the state of the application and inform the window.</commentary>
			<name>addWindowListener</name>
			<returns>
				<type>void</type>
			</returns>
			<param>
				<type>WindowListener</type>
				<name>windowlistener</name>
				<comment> - the window listener to be added</comment>
			</param>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the {@code DrawCanvas} rendering surface.</commentary>
			<name>getDrawCanvas</name>
			<returns>
				<type>DrawCanvas</type>
				<comment>the {@code DrawCanvas} rendering surface</comment>
			</returns>
			<throws>canvas;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the {@code JFrame} which is the primary windowing container.</commentary>
			<name>getFrame</name>
			<returns>
				<type>JFrame</type>
				<comment>the {@code JFrame} which is the primary windowing container</comment>
			</returns>
			<throws>jf_frame;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the {@code MouseInput} object attached to the window.</commentary>
			<name>getMouse</name>
			<returns>
				<type>MouseInput</type>
				<comment>the {@code MouseInput} object attached to the window</comment>
			</returns>
			<throws>mi;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the {@code KeyboardInput} object attached to the window.</commentary>
			<name>getKeyboard</name>
			<returns>
				<type>KeyboardInput</type>
				<comment>the {@code KeyboardInput} object attached to the window</comment>
			</returns>
			<throws>ki;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the internal rendering width of the window.</commentary>
			<name>getWidth</name>
			<returns>
				<type>int</type>
				<comment>the internal rendering width of the window</comment>
			</returns>
			<throws>width;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the internal rendering height of the window.</commentary>
			<name>getHeight</name>
			<returns>
				<type>int</type>
				<comment>the internal rendering height of the window</comment>
			</returns>
			<throws>height;}</throws>
			<since>1.0.0</since>
		</method>
		<method>
			<commentary>Returns the title of the window.</commentary>
			<name>getTitle</name>
			<returns>
				<type>String</type>
				<comment>the title of the window</comment>
			</returns>
			<throws>title;}</throws>
			<since>1.0.0</since>
		</method>
	</code>
</source>
